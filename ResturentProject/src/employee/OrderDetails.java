/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package employee;
import database.RestaurantDatabase;
import java.util.*;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JScrollPane;

/**
 *
 * @author chatw
 */
public class OrderDetails extends javax.swing.JFrame {
    
    private JTable Orders;
    private DefaultTableModel OrdersModel;
    /**
     * Creates new form OrderDetails
     */
    public OrderDetails() {
        initComponents();
        setupTable();

    }
        private void setupTable() {
        // Initialize the table model
        OrdersModel = new DefaultTableModel(
            new Object [][] {
                {null,null, null, null, null, null, null, null}
            },
            new String [] {
                "Orderd item ID","Order ID", "Table ID", "Item", "Quantity", "Extra", "Orderd time", "Item state"
            }
        );

//        // Initialize the table
        Orders = new JTable(OrdersModel);
//
//        // Add the table to a JScrollPane and add it to your form
        JScrollPane scrollPane = new JScrollPane(Orders);
        scrollPane.setBounds(250, 100, 800, 350); // adjust these values as needed
        getContentPane().add(scrollPane);
    }
    RestaurantDatabase db = new RestaurantDatabase();
 public void getSQL() {
    List<Map<String, String>> result;
    // This is to store the SQL query
    String sql;

    

    // SQL query to get all orders with currentState = "pending", and their corresponding food item name, ordered quantity, table ID, order date, order time, and current state
  sql = "SELECT o.orderId, o.TableId, o.orderdDate, o.orderdTime, o.currentState, o.additionalInfo, f.foodName, orderFood.quntity, orderFood.orderFoodId, orderFood.state " +
      "FROM `order` o " +
      "JOIN `orderFood` ON o.orderId = `orderFood`.orderId " +
      "JOIN food f ON `orderFood`.foodId = f.foodId " +
      "WHERE o.currentState = 'pending';";

    result = db.executeQuery(sql);
    System.out.println(result);

//    try {
//        db.getConnection().close();
//    } catch (Exception e) {
//        System.out.println("Error while closing the connection: " + e.getMessage());
//    }
    for (Map<String, String> row : result) {
        OrdersModel.addRow(new Object[] {
            row.get("orderFoodId"),
            row.get("orderId"),
            row.get("TableId"),
            row.get("foodName"),
            row.get("quntity"),
            row.get("additionalInfo"),
            row.get("orderdTime"),
            row.get("state")
            
        });
    }
    
    // Clear the combo box
cmbOrderId.removeAllItems();

// Add each orderFoodId to the combo box
for (Map<String, String> row : result) {
    cmbOrderId.addItem(row.get("orderFoodId"));
}
for (Map<String, String> row : result) {
    cmbFullOrderID.addItem(row.get("orderId"));
}

}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void resetTable(){
                DefaultTableModel model = (DefaultTableModel) Orders.getModel();
        model.setRowCount(0);

        getSQL();
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbOrderId = new javax.swing.JComboBox<>();
        btnPackaging = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnFinish1 = new javax.swing.JButton();
        btnTakeOrder = new javax.swing.JButton();
        btnPreppingOrder1 = new javax.swing.JButton();
        btnCookingOrder1 = new javax.swing.JButton();
        cmbFullOrderID = new javax.swing.JComboBox<>();
        btnCancelOrder = new javax.swing.JButton();
        btnFinishOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1100, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        cmbOrderId.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cmbOrderId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item ID" }));
        cmbOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderIdActionPerformed(evt);
            }
        });
        getContentPane().add(cmbOrderId);
        cmbOrderId.setBounds(20, 20, 200, 40);

        btnPackaging.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnPackaging.setText("PACKAGING");
        btnPackaging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPackagingActionPerformed(evt);
            }
        });
        getContentPane().add(btnPackaging);
        btnPackaging.setBounds(30, 340, 175, 40);

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnCancel.setText("CANCEL ITEM");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel);
        btnCancel.setBounds(30, 500, 179, 40);

        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset);
        btnReset.setBounds(870, 30, 175, 40);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 28)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORDER");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(230, 10, 130, 59);

        btnFinish1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnFinish1.setText("SERVE");
        btnFinish1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinish1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnFinish1);
        btnFinish1.setBounds(30, 420, 175, 40);

        btnTakeOrder.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnTakeOrder.setText("ACCEPT ITEM");
        btnTakeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeOrderActionPerformed(evt);
            }
        });
        getContentPane().add(btnTakeOrder);
        btnTakeOrder.setBounds(30, 100, 175, 40);

        btnPreppingOrder1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnPreppingOrder1.setText("PREPARING ");
        btnPreppingOrder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreppingOrder1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnPreppingOrder1);
        btnPreppingOrder1.setBounds(30, 180, 175, 40);

        btnCookingOrder1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnCookingOrder1.setText("COOKING");
        btnCookingOrder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCookingOrder1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnCookingOrder1);
        btnCookingOrder1.setBounds(30, 260, 175, 40);

        cmbFullOrderID.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cmbFullOrderID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Order ID" }));
        cmbFullOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFullOrderIDActionPerformed(evt);
            }
        });
        getContentPane().add(cmbFullOrderID);
        cmbFullOrderID.setBounds(260, 500, 200, 40);

        btnCancelOrder.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnCancelOrder.setText("CANCEL ORDER");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelOrder);
        btnCancelOrder.setBounds(780, 500, 240, 40);

        btnFinishOrder.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnFinishOrder.setText("FINISH ORDER");
        btnFinishOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishOrderActionPerformed(evt);
            }
        });
        getContentPane().add(btnFinishOrder);
        btnFinishOrder.setBounds(500, 500, 240, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPackagingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPackagingActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Packaging' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnPackagingActionPerformed

    private void cmbOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrderIdActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        resetTable();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnTakeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeOrderActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Order Taken' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
        
    }//GEN-LAST:event_btnTakeOrderActionPerformed

    private void btnPreppingOrder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreppingOrder1ActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Preparring' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnPreppingOrder1ActionPerformed

    private void btnCookingOrder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCookingOrder1ActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Cooking' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnCookingOrder1ActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Cancelled' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnFinish1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinish1ActionPerformed
        String selectedOrderFoodId = (String) cmbOrderId.getSelectedItem();
        String sql = "UPDATE orderFood SET state = 'Serving' WHERE orderFoodId = "+selectedOrderFoodId+"";     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnFinish1ActionPerformed

    private void cmbFullOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFullOrderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFullOrderIDActionPerformed

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
         String selectedOrderFoodId = (String) cmbFullOrderID.getSelectedItem();
        String sql = "UPDATE `order` SET currentState = 'Order Finished' WHERE orderId = "+selectedOrderFoodId+"";
   
        db.executeQuery(sql);
        
        resetTable();    }//GEN-LAST:event_btnCancelOrderActionPerformed

    private void btnFinishOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishOrderActionPerformed
         String selectedOrderFoodId = (String) cmbFullOrderID.getSelectedItem();
        String sql = "UPDATE `order` SET currentState = 'Order Finished' WHERE orderId = "+selectedOrderFoodId+"";
     
        db.executeQuery(sql);
        
        resetTable();
    }//GEN-LAST:event_btnFinishOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderDetails().setVisible(true);
            }
            
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnCookingOrder1;
    private javax.swing.JButton btnFinish1;
    private javax.swing.JButton btnFinishOrder;
    private javax.swing.JButton btnPackaging;
    private javax.swing.JButton btnPreppingOrder1;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTakeOrder;
    private javax.swing.JComboBox<String> cmbFullOrderID;
    private javax.swing.JComboBox<String> cmbOrderId;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
